1.SQL实现行转列的实现方式有几种？分别是什么？
第一种：静态行转列用case when实现；
第二种，用povit函数实现行转列；
第三种：用存储过程行转列
2.说说你工作中常用的调优技巧和方法(说出以下至少5点)
1)、对查询进行优化，应尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。
2)、应尽量避免在where子句中对字段进行null值判断，创建表时NULL是默认值，但大多数时候应该使用NOT NULL，或者使用一个特殊的值，如0，-1作为默认值。
3)、应尽量避免在where子句中使用!=或<>操作符，MySQL只有对以下操作符才使用索引：<，<=，=，>，>=，BETWEEN，IN，以及某些时候的LIKE。
4)、应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，可以使用UNION合并查询：select id from t where num=10 union all select id from t where num=20。
5)、in和not in也要慎用，否则会导致全表扫描，对于连续的数值，能用between就不要用in了：Select id from t where num between 1 and 3。
6)、下面的查询也将导致全表扫描：select id from t where name like‘%abc%’或者select id from t where name like‘%abc’若要提高效率，可以考虑全文检索。而select id from t where name like‘abc%’才用到索引。
7)、如果在where子句中使用参数，也会导致全表扫描。
8)、应尽量避免在where子句中对字段进行表达式操作，应尽量避免在where子句中对字段进行函数操作。
9)、很多时候用exists代替in是一个好的选择：select num from a where num in(select num from b)。用下面的语句替换：select num from a where exists(select 1 from b where num=a.num)。
10)、索引固然可以提高相应的select的效率，但同时也降低了insert及update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。
11)、应尽可能的避免更新clustered索引数据列， 因为clustered索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新clustered索引数据列，那么需要考虑是否应将该索引建为clustered索引。
12)、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。
13)、尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。
14)、最好不要使用*返回所有：select from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。
15)、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。
16)、使用表的别名(Alias)：当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个Column上。这样一来，就可以减少解析的时间并减少那些由Column歧义引起的语法错误。
17)、避免死锁，在你的存储过程和触发器中访问同一个表时总是以相同的顺序；事务应经可能地缩短，在一个事务中应尽可能减少涉及到的数据量；永远不要在事务中等待用户输入。
18)、避免使用临时表，除非却有需要，否则应尽量避免使用临时表，相反，可以使用表变量代替；大多数时候(99%)，表变量驻扎在内存中，因此速度比临时表更快，临时表驻扎在TempDb数据库中，因此临时表上的操作需要跨数据库通信，速度自然慢。
3.说说SQL索引的使用规范
索引的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引；
尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引；
避免对大表查询时进行table scan，必要时考虑新建索引；
在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用；
要注意索引的维护，周期性重建索引，重新编译存储过程。
4.聚集索引和非聚集索引的区别
聚集索引——有助于轻松检索数据，并且只有一个聚集索引与一个表一起分配。它会更改记录在数据库中的保存方式。
非聚集索引——与聚集索引相比，非聚集索引很慢。并且在非集群索引的情况下，该表可以具有多个索引，为表创建一个对象，该表是搜索后指向表的一个点。
5.什么是Trigger（触发器）
触发器用于对表执行特定操作，例如INSERT、UPDATE或DELETE。它是一种存储过程。动作和事件是触发器的主要组成部分。执行Action时，事件响应该操作而出现。
6.存储过程和函数的区别
1)本质上没区别。只是函数有如：只能返回一个变量的限制。而存储过程可以返回多个。而函数是可以嵌入在sql中使用的,可以在select中调用，而存储过程不行。执行的本质都一样。 函数限制比较多，比如不能用临时表，只能用表变量．还有一些函数都不可用等等．而存储过程的限制相对就比较少 
2)一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。 
3)对于存储过程来说可以返回参数，而函数只能返回值或者表对象。 
4)存储过程一般是作为一个独立的部分来执行（EXEC执行），而函数可以作为查询语句的一个部分来调用（SELECT调用），由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。 
5)当存储过程和函数被执行的时候，SQL Manager会到procedure cache中去取相应的查询语句，如果在procedure cache里没有相应的查询语句，SQL Manager就会对存储过程和函数进行编译。 
Procedure cache中保存的是执行计划 (execution plan) ，当编译好之后就执行procedure cache中的execution plan，之后SQL SERVER会根据每个execution plan的实际情况来考虑是否要在cache中保存这个plan，评判的标准一个是这个execution plan可能被使用的频率；其次是生成这个plan的代价，也就是编译的耗时。保存在cache中的plan在下次执行时就不用再编译了
7.说说常用的表连接的方式，有什么区别
INNER JOIN:   返回两个表的匹配得上的数据，不匹配不显示
LEFT JOIN:     即使右表中没有匹配，也从左表返回所有的行，没匹配的数据填空null
RIGHT JOIN:   即使左表中没有匹配，也从右表返回所有的行，没匹配的数据填空null
FULL JOIN:     返回两个表的所有数据，没匹配的数据填空null
8.用过CROSS JOIN吗？什么是CROSS JOIN，原理是什么？
交叉连接。交叉连接返回被连接两个表的卡迪尔乘积。
9.现在有一个SQL查询，使用了IN操作，IN里面的数据量非常大，怎么优化？有哪些解决方案
1).将in后的查询结果通过条件过滤，缩小范围
2).使用join 代替
3).使用not exists代替
10.什么是死锁？
死锁是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等的进程称为死锁进程.
11. 如何预防死锁？
1)尽量避免并发的执行涉及到修改数据的语句。
2)要求每一个事务一次就将所有要使用到的数据全部加锁，否则就不允许执行。
3)预先规定一个加锁顺序，所有的事务都必须按照这个顺序对数据执行封锁。如不同的过程在事务内部对对象的更新执行顺序应尽量保证一致。
4)每个事务的执行时间不可太长，对程序段的事务可考虑将其分割为几个事务。在事务中不要求输入，应该在事务之前得到输入，然后快速执行事务。
5)使用尽可能低的隔离级别。
6)数据存储空间离散法。该方法是指采用各种手段，将逻辑上在一个表中的数据分散的若干离散的空间上去，以便改善对表的访问性能。主要通过将大表按行或者列分解为若干小表，或者按照不同的用户群两种方法实现。
7)编写应用程序，让进程持有锁的时间尽可能短，这样其它进程就不必花太长的时间等待锁被释放。




